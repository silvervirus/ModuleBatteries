using HarmonyLib;
using ModuleBatteries;
using UnityEngine;

[HarmonyPatch(typeof(EnergyMixin), nameof(EnergyMixin.Awake))]
public static class EnergyMixin_Awake_Patch
{
    [HarmonyPrefix]
    public static void Prefix(EnergyMixin __instance)
    {
        if (__instance.compatibleBatteries == null)
            __instance.compatibleBatteries = new List<TechType>();

        AddIfMissing(__instance.compatibleBatteries, ModuleBattery.techtype);
        AddIfMissing(__instance.compatibleBatteries, BioReactorBattery.techtype);
        AddIfMissing(__instance.compatibleBatteries, NuclearBattery.techtype);

        var models = new List<EnergyMixin.BatteryModels>(__instance.batteryModels ?? new EnergyMixin.BatteryModels[0]);
        var baseModel = models.FirstOrDefault(m => m.techType == TechType.Battery).model;

        AddBatteryModelIfMissing(models, ModuleBattery.techtype, baseModel);
        AddBatteryModelIfMissing(models, BioReactorBattery.techtype, baseModel);
        AddBatteryModelIfMissing(models, NuclearBattery.techtype, baseModel);

        __instance.batteryModels = models.ToArray();
    }

    private static void AddIfMissing(List<TechType> list, TechType type)
    {
        if (!list.Contains(type))
            list.Add(type);
    }

    private static void AddBatteryModelIfMissing(List<EnergyMixin.BatteryModels> models, TechType type, GameObject template)
    {
        if (models.Any(m => m.techType == type) || template == null)
            return;

        var copy = GameObject.Instantiate(template);
        copy.name = $"{type.AsString()}_model";
        copy.SetActive(false);
        models.Add(new EnergyMixin.BatteryModels { techType = type, model = copy });
    }
}
